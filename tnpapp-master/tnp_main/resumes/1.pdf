#include<iostream>
#include<GL/glut.h>
#include<math.h>
using namespace std;
class Point
{
  public:
   int x,y;

};
int k=0;
Point pt[5];

void init()
{
   glClear(GL_COLOR_BUFFER_BIT);
   glClearColor(1,1,0,1);
   gluOrtho2D(0,640,480,0);
   glFlush();
}
static int value;
static int menu_id;
void menu(int num)
{
  value=num;
  glutPostRedisplay();  
}
void draw()
{
   glClear(GL_COLOR_BUFFER_BIT);
   glFlush();
   if(value==1)
   {
     glColor3f(1,0,0);
    } 
if(value==2)
   {
     glColor3f(0,1,0);
    } 
if(value==3)
   {
     glColor3f(0,0,1);
    } 

      glBegin(GL_POLYGON);
              glVertex2i(pt[0].x,pt[0].y);
              glVertex2i(pt[1].x,pt[1].y);
              glVertex2i(pt[2].x,pt[2].y);
              glVertex2i(pt[3].x,pt[3].y);
           
           
          glEnd();
  glFlush();
  
   
}

void create()
{
    menu_id=glutCreateMenu(menu);
    glutAddMenuEntry("Red",1);
    glutAddMenuEntry("Green",2);
    glutAddMenuEntry("Blue",3);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

}
void mouse(int button,int state,int x,int y)
{
   if(button==GLUT_LEFT_BUTTON && state==GLUT_DOWN)
    {
        pt[k].x=x;
        pt[k].y=y;
        k++;
        glPointSize(4);
        glColor3f(0,0,1);
         glBegin(GL_POINTS);
           glVertex2i(x,y);
         glEnd();
      if(k>=4)
      {
          glBegin(GL_POLYGON);
              glVertex2i(pt[0].x,pt[0].y);
              glVertex2i(pt[1].x,pt[1].y);
              glVertex2i(pt[2].x,pt[2].y);
              glVertex2i(pt[3].x,pt[3].y);
           
           
          glEnd();
  
       }
         glFlush();
    }

}
int main(int argc,char **argv)
{
  glutInit(&argc,argv);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(0,0);
  glutCreateWindow("DDA");  
  init();
   create();
   glutDisplayFunc(draw);
   glutMouseFunc(mouse);
  glutMainLoop();
  return 0;
}
